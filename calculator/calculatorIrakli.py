# -*- coding: utf-8 -*-
"""APC.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MaAElu8zx7DZI_Ho1qY_6Y0A65uhliJq

# 1. Matrix Addition
"""

def __add__(self, other):
    #Creating a new matrix where the result of addition will be stored
    new_matrix = []

    # Checking if the dimensions of two matrices are the same
    if len(self.new_matrix) != len(other.new_matrix) or len(self.new_matrix[0]) != len(other.new_matrix[0]):
      raise ArithmeticError('Matrices are not the same size!')
    # Using for-loop to add up the elements of two matrices
    for i in range(len(self.new_matrix)):
        new_matrix.append([])
        for j in range(len(self.new_matrix[0])):
            new_matrix[i].append(self.new_matrix[i][j] + other.new_matrix[i][j])

    return new_matrix



def zero_matrix(rows, cols):
  matrix = []
  while len(matrix) < rows:
    matrix.append([])
    while len(matrix[-1]) < cols:
      matrix[-1].append(0.0)

  return matrix

def identity_matrix(m):
  idmatrix = zero_matrix(m,m)
  for element in range(m):
    idmatrix[i][i] = 1.0

  return idmatrix


def eigenvalues(A):
  float lambda = None
  list_of_eigenvalues = []
  # Transpose matrix A
  A_transpose = Matrix.transpose(A)
  # Multiply matrix a by its transpose to get a square matrix
  A_square = Matrix.multiply(A, A_transpose)

  #Identity matrix with dimensions of matrix A
  id_matrix = identity_matrix(Matrix.getRank(A_Square))
  #Multiplying identity matrix with lambda
  lambdaid = id_matrix.multiply(lambda)
  #Substracting resulting matrix from matrix A_Square
  substraction_result = A_square.substract(lambdaid)
  #Using determinant function to get the characteristic(quadrati) equation
  charac_equation = Matrix.det(substraction_result)

  #need to extract coefficients of the quadratic equation to solve for eigenvalues

import math

# Function accepts coefficients of the characteristic equation |A-Lambda*I|=0
def quadratic_equation(a,b,c):
a = float(input("Insert coefficient a: "))
b = float(input("Insert coefficient b: "))
c = float(input("Insert coefficient c: "))

discriminant = b**2 - 4 * a * c

if discriminant >= 0:
    lambda_1=(-b+math.sqrt(discriminant))/2*a
    Lambda_2=(-b-math.sqrt(discriminant))/2*a
else:
    lambda_1= complex((-b/(2*a)),math.sqrt(-discriminant)/(2*a))
    lambda_2= complex((-b/(2*a)),-math.sqrt(-discriminant)/(2*a))

if discriminant > 0:
    print("Quadratic euqation has two distinct real roots: ", lambda_1, " and ", Lambda_2)
elif discriminant == 0:
    print("Quadratic equation has one double root: ", lambda_1)
else:
    print("Quadratic equation has two complex roots: ", lambda_1, " and ", Lambda_2)

"""# 2. Eigenvalues and Eigenvectors"""